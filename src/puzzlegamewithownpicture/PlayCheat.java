/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puzzlegamewithownpicture;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author sean
 */
public class PlayCheat extends javax.swing.JPanel {

    /**
     * Creates new form PlayCheat
     */
    String inputImagePath;
    String questionMarkPath = "/resources/images/?.jpg";
    private BufferedImage image;
    private int userChoice = 0;
    
    public PlayCheat() {
        initComponents();
    }
    
    //read infromation from play
    public void readPath(String path, int uc){
        inputImagePath = path;
        userChoice = uc;
    }
    
    public void showImage() {
        image = resizedImage(inputImagePath, userChoice);
    }
    
    public void hideImage() {
        image = resizedImage(questionMarkPath, 0);
    }
    
    // reads input image
    private BufferedImage resizedImage(String inputImagePath, int userChoice) {
        BufferedImage inputImage = null;
        
        //user choose use absolute path
        if (userChoice == 0) {
            try {
                inputImage = ImageIO.read(PuzzleGame.class.getResource(inputImagePath));
            } catch (IOException ex) {
                Logger.getLogger(PuzzleGame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //initial choose use related path
        else {
            try {
                inputImage = ImageIO.read(new File(inputImagePath));
            } catch (IOException ex) {
                Logger.getLogger(GameSetting.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
 
        // creates output image
        BufferedImage outputImage = new BufferedImage(100, 100, inputImage.getType());
 
        // scales the input image to the output image
        Graphics2D g2d = outputImage.createGraphics();
        g2d.drawImage(inputImage, 0, 0, 100, 100, null);
        g2d.dispose();
        
        return outputImage;
    }
        
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this); // see javadoc for more info on the parameters            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(100, 100));
        setMinimumSize(new java.awt.Dimension(100, 100));
        setPreferredSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
